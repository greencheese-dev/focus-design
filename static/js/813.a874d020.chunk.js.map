{"version":3,"file":"static/js/813.a874d020.chunk.js","mappings":"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","sources":["webpack://focus-design/./src/routes/Contact.module.css?4b3b","webpack://focus-design/./src/components/Contact/Contacts.module.css?d2a9","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js","components/Contact/Contacts.js","routes/Contact.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Contact_wrapper__J1MnH\",\"header\":\"Contact_header__iobBi\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Contacts_container__n+hYZ\",\"form\":\"Contacts_form__eep9Q\",\"row\":\"Contacts_row__kOMDG\",\"title\":\"Contacts_title__pxn4t\",\"label\":\"Contacts_label__kBJQz\",\"input\":\"Contacts_input__UfOIV\",\"textarea\":\"Contacts_textarea__SOOWi\",\"button\":\"Contacts_button__em8LS\",\"message\":\"Contacts_message__iNfY-\",\"success\":\"Contacts_success__bGTCU\",\"error\":\"Contacts_error__egbQc\",\"none\":\"Contacts_none__q0RNu\"};","export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n","import React, { useState, useRef } from \"react\";\nimport styles from \"./Contacts.module.css\";\nimport emailjs from \"@emailjs/browser\";\n\nconst Contacts = () => {\n  const [sender, setSender] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [message, setMessage] = useState({ text: \"-\", type: \"\" });\n  const [messageState, setMessageState] = useState(false);\n\n  const form = useRef();\n  const handleSubmit = (e) => {\n    if (sender.trim() && title.trim() && content.trim()) {\n      e.preventDefault();\n      emailjs\n        .sendForm(\"greencheese.dev\", \"template_31wd04h\", form.current, {\n          publicKey: \"6c151Fvasbmz0k3Wv\",\n        })\n        .then(\n          () => {\n            console.log(\"Submitted:\", { sender, title, content });\n            setMessage({\n              text: \"작성하신 글이 정상적으로 전송되었습니다!\",\n              type: \"success\",\n            });\n            setMessageState(true);\n            setTimeout(() => {\n              setMessageState(false);\n              setTimeout(() => {\n                setMessage({\n                  text: \"-\",\n                  type: \"\",\n                });\n              }, 600);\n            }, 3000);\n            setSender(\"\");\n            setTitle(\"\");\n            setContent(\"\");\n          },\n          (error) => {\n            setMessage({\n              text: \"전송중에 문제가 발생했습니다.\",\n              type: \"error\",\n            });\n            console.log(\"FAILED...\", error.text);\n          }\n        );\n    } else {\n      setMessage({\n        text: \"모든 내용을 작성해주세요.\",\n        type: \"error\",\n      });\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      <h1 className={styles.title}>Contact Us</h1>\n      <form onSubmit={handleSubmit} className={styles.form} ref={form}>\n        <div className={styles.row}>\n          <label htmlFor=\"title\" className={styles.label}>\n            Sender\n          </label>\n          <input\n            type=\"text\"\n            id=\"sender\"\n            name=\"sender\"\n            value={sender}\n            onChange={(e) => setSender(e.target.value)}\n            className={styles.input}\n            placeholder=\"연락처 또는 이메일을 작성해주세요.\"\n            maxLength={50}\n            required\n          />\n        </div>\n        <div className={styles.row}>\n          <label htmlFor=\"title\" className={styles.label}>\n            Title\n          </label>\n          <input\n            type=\"text\"\n            id=\"title\"\n            name=\"title\"\n            value={title}\n            onChange={(e) => setTitle(e.target.value)}\n            className={styles.input}\n            placeholder=\"제목을 작성해주세요. (30자 이내)\"\n            maxLength={30}\n            required\n          />\n        </div>\n        <div className={styles.row}>\n          <label htmlFor=\"content\" className={styles.label}>\n            Content\n          </label>\n          <textarea\n            id=\"content\"\n            name=\"content\"\n            value={content}\n            onChange={(e) => setContent(e.target.value)}\n            className={styles.textarea}\n            placeholder=\"여기에 문의하실 내용을 작성해주세요... (1000자 이내)\"\n            maxLength={1000}\n            required\n          />\n        </div>\n        <button type=\"submit\" className={styles.button}>\n          보내기\n        </button>\n      </form>\n      {/* {message.text && ( */}\n      <div\n        className={`${styles.message} \n        ${message.type === \"success\" ? styles.success : styles.error}\n        ${messageState ? \"\" : styles.none}\n        `}\n      >\n        {message.text}\n      </div>\n      {/* )} */}\n    </div>\n  );\n};\n\nexport default Contacts;\n","import styles from \"./Contact.module.css\";\n\nimport Contacts from \"../components/Contact/Contacts\";\n\nconst contact = () => {\n  return (\n    <div className={`flex flex-col content-start ${styles.wrapper}`}>\n      <h1\n        className={`border-t-2 border-b border-black text-left pb-2 ${styles.header}`}\n      >\n        contact.\n      </h1>\n      <Contacts />\n    </div>\n  );\n};\n\nexport default contact;\n"],"names":["EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","value","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","message","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","_options$list","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","name","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","id","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","form","opts","blockList","limitRate","reject","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","formData","location","pathname","append","Contacts","sender","setSender","useState","title","setTitle","content","setContent","setMessage","type","messageState","setMessageState","useRef","_jsxs","className","styles","children","_jsx","onSubmit","e","trim","preventDefault","emailjs","current","then","console","log","setTimeout","error","ref","htmlFor","onChange","target","placeholder","maxLength","required","concat","contact"],"sourceRoot":""}